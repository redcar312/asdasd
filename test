#include <stdio.h>
#include <stdlib.h> 
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
enum	Types
{
	WORD,
	COMMAND,
	CAT,
	PIPE,
	CD,
	EXPORT,
	ENV,
	ECHO,
	UNSET,
	EXIT,
    N,
	PWD,
	EV,
	RD_O,
	RD_O_APPEND,
	RD_I,
	READ_I,
};

typedef struct	t_token 
{
	size_t	id;
	enum	Types type;
	char	*str;
	int	int_val;
	struct t_token *next;
	struct t_token *prev;
}	t_token ;

typedef struct	t_com
{
	int	pipe_fd[2];
	char	**args;
	char	*path;
	enum Types	type;
	bool	is_piped;
	bool	has_flag;
	bool	is_empty;
	struct t_com	*next;
	struct t_com	*prev;
}	t_com;

typedef struct s_env
{
	char			*name;
	char			*value;
	struct s_env	*next;
}	t_env;

typedef struct	t_shell
{
	struct	t_com  *commands;
	struct	t_token *tokens;
	struct	t_env	*envs;
	char **lines;
}	t_shell;



int ftstrcmp(char *s1, char *s2)
{
	size_t  i;
	i = 0;
	if (!s1 || !s2)
		return (0);
	while (s1[i] || s2[i])
	{
		if (s1[i] != s2[i])
			return (0);
		i++;
	}
	return (1);
}

void set_type(t_token *token)
{
	if (ftstrcmp("echo", token->str))
		token->type = COMMAND;
	if (ftstrcmp("cat", token->str))
		token->type = COMMAND;
	if (ftstrcmp("pwd", token->str))
		token->type = COMMAND;
	if (ftstrcmp("exit", token->str))
		token->type = COMMAND;
	if (ftstrcmp("|", token->str))
		token->type = PIPE;
	if (ftstrcmp("unset", token->str))
		token->type = COMMAND;
	if (ftstrcmp("export", token->str))
		token->type = COMMAND;
	if (ftstrcmp("-n", token->str))
		token->type = N;
	if (ftstrcmp("env", token->str))
		token->type = EV;
	if (ftstrcmp(">", token->str))
		token->type = RD_O;
	if (ftstrcmp(">>", token->str))
		token->type = RD_O_APPEND;
	if (ftstrcmp("<", token->str))
		token->type = RD_I;
	if (ftstrcmp("<<", token->str))
		token->type = READ_I;
}

bool	is_closed(char *line, char q)
{
	size_t	i;

	i = 0;	
	while(line[i])
	{
		if (line[i] == q)
			return (true);
		i++;
	}
	return (false);
}

int	is_whitespace(char c)
{
	return((c == ' ' || c == 9));
}


size_t	handle_sq(char *line)
{
	size_t	i;

	i = 0;
	while (line[i] != 39 && line[i])
		i++;
	i++;
	return (i);
}

size_t	handle_dq(char *line)
{
	size_t	i;

	i = 0;
	while (line[i] != 34 && line[i])
		i++;
	i++;
	return (i);
}

ssize_t	count_token_amount(char *line)
{
	size_t	i;
	ssize_t	count;

	i = 0;
	i = 0;
	while (line[i])
	{
		if (!is_whitespace(line[i]))
		{
			count++;
			while (!is_whitespace(line[i]) && line[i])
			{	
				if (line[i] == 39)
					i += handle_sq(&line[i + 1]);
				else if (line[i] == 34)
					i += handle_dq(&line[i + 1]);
				i++;
			}
		}
		else
			i++;
	}
	return (count);
}

bool	check_sq(char *line)
{
	size_t	i;

	i = 0;
	while (line[i])
	{
		if (line[i] == 39)
			return (true);
		i++;
	}
	return (false);
}

bool	check_dq(char *line)
{
	size_t	i;
	
	i = 0;
	while (line[i])
	{
		if (line[i] == 34)
			return (true);
		i++;	
	}
	return (false);
}

bool	validator(char *line)
{
	size_t	i;

	i = 0;
	while (line[i])
	{
		if (!is_whitespace(line[i]))
		{
			while (!is_whitespace(line[i]) && line[i])
			{
				if (line[i] == 39)
				{
					if (!check_sq(&line[i]))
						exit(1);
					i += handle_sq(&line[i]);
				}
				if (line[i] == 34)
				{
					if (!check_dq(&line[i]))
						exit(1);
					i += handle_dq(&line[i]);
				}
			}
			i++;
		}
	}

}

size_t	custom_len(char *line)
{
	size_t	i;
	
	i = 0;
	while (!is_whitespace(line[i]) && line[i])
	{
    		if (line[i] == 39)
    			i += handle_sq(&line[i + 1]);
    		if (line[i] == 34)
    			i += handle_dq(&line[i + 1]);
    		i++;
	}
    return (i);
}

char *custom_dup(char *line)
{
    size_t  i;
    char    *res;
    size_t	l;

    l = custom_len(line);
    printf("%ld \n", l);
    res = (char *)malloc((l + 1) * sizeof(char));
    i = 0;
    while (i <= l)
    {
        res[i] = line[i];
        i++;
    }
    res[i] = '\0';
    return (res);
}

t_token *make_token(char *line)
{
    t_token *token;
    
    token = (t_token *)malloc(1 * sizeof(t_token));
    token->str = custom_dup(line);
    token->next = NULL;
    token->prev = NULL;
    token->type = WORD;
    set_type(token);
    return (token);
}

void    add_token(t_token **stack, t_token *new)
{
    t_token *current;

    if(!*stack)
    {
        *stack = new;
        return;
    }
    current = *stack;
    while (current->next)
    {
        current = current->next;
    }
    current->next = new;
    new->prev = current;
}

t_token *tokenize(char *line, t_token **stack)
{
    t_token *new;
    size_t  i;
    
    i = 0;
    while (line[i])
    {
    
        if (!is_whitespace(line[i]))
        {
            new = make_token(&line[i]);
            add_token(stack, new);
            while (!is_whitespace(line[i]) && line[i])
            {
                if(line[i] == 39)
                    i += handle_sq(&line[i + 1]);
                if(line[i] == 34)
                    i += handle_dq(&line[i + 1]);
                i++;
            }
        }
        else
            i++;
    }
    return(*stack);
}

size_t  count_args(t_token **tokens)
{
    size_t  i;
    t_token *current;
    
    current = *tokens;
    i = 1;
    while (current->next && current->next->type != PIPE)
    {
        i++;
        current = current->next;
    }
    return (i);
}

size_t  count_coms(t_token **tokens)
{
    size_t  res;
    t_token *current;
    
    res = 1;
    current = *tokens;
    while(current->next)
    {
        if(current->type == PIPE)
            res++;
        current = current->next;
    }
    return (res);
}

t_com *handle_single(t_token **tokens, t_com **coms)
{
    t_com   *new;
    size_t  n;
    t_token *current;
    
    n = count_args(tokens);
    new = (t_com *)malloc(1 * sizeof(t_com));
    new->args = (char **)malloc(n * sizeof(char *));
    if (!new->args)
        return NULL;
    current = *tokens;
    n = 0;
    while (current->next)
    {
        new->args[n] = custom_dup(current->str);
        n++;
        current = current->next;
    }
    new->args[n] = custom_dup(current->str);
    return (new);
}

t_com *make_com(t_token **tokens)
{
    size_t  ac;
    t_token *current;
    t_com   *new;
    size_t  i;
    
    if (!*tokens)
        exit(1);
    ac = count_args(tokens);
    new = (t_com *)malloc(1 * sizeof(t_com));
    new->args = (char **)malloc(ac *sizeof(char *));
    current = *tokens;
    i = 0;
    while(i < ac)
    {
        new->args[i] = custom_dup(current->str);
        current = current->next;
        i++;
    }
    return (new);
}

void    add_com(t_com *new, t_com **coms)
{
    t_com *current;

    current = *coms;
    if (!*coms)
    {
        *coms = new;
        return ;
    }
    while (current->next)
        current = current->next;
    current->next = new;
    new->prev = current;
}

t_com   *make_coms(t_token **tokens, t_com **coms)
{
    t_token *current;
    t_com   *new;

    current = *tokens;
    new = make_com(tokens);
    add_com(new, coms);
    while (current->next)
    {
        if (current->type == PIPE)
        {
            new = make_com(&current->next);
            add_com(new, coms);
        }
        current = current->next;
    }
    return (*coms);
}

t_com   *init_coms(t_token **tokens, t_com **coms)
{
    t_token *current;
    size_t  cc;

    cc = count_coms(tokens);
    current = *tokens;
    if (cc == 1)
        *coms = handle_single(tokens, coms);
    else
        *coms = make_coms(tokens, coms);
    return (*coms);
}

int main()
{
    t_token *t;
    t_com *c;
    t = NULL;
    c = NULL;
    t = tokenize("e'cho e' | asd e", &t);
    printf("%s", t->next->str);
}

